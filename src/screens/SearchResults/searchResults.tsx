import { useRouter } from 'next/router';
import Container from '@src/components/Container/container';
import Footer from '@src/components/Footer/footer';
import Header from '@src/components/Header/header';
import MenuCategory from '@src/components/MenuCategory/menuCategory';
import MovieCarousel from '@src/components/MovieCarousel/movieCarousel';
import Text from '@src/components/Text/text';
import withAuth from '@src/hook/withAuth';
import Box from '@src/shared/Box/box';
import theme from '@src/styles/themes';
import Head from 'next/head';
import { API_KEY } from 'pages/api/tmdb';
import { useEffect, useState } from 'react';
import { Items } from '@src/types/apiTypes';
import { useMoviesContext } from '@src/context/moviesContext';

function SearchResults() {
  const router = useRouter();
  const { query } = router.query; // Obt√©m o termo da busca da URL
  const [results, setResults] = useState<Items>({ results: [] });
  const [error, setError] = useState('');
  const [errorIsVisible, setErrorIsVisible] = useState(false); // Controle de visibilidade
  const mockMovies = useMoviesContext();

  useEffect(() => {
    if (query) {
      const fetchMovies = async () => {
        const searchQuery = typeof query === 'string' ? query : query.toString();

        const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${encodeURIComponent(searchQuery)}`;

        try {
          const response = await fetch(url);
          const data = await response.json();
          setResults(data);

          if (data.results.length === 0) {
            setError('Nenhum resultado encontrado üòï');
            setErrorIsVisible(false); // Garante que est√° invis√≠vel antes de exibir
            setTimeout(() => setErrorIsVisible(true), 50); // Ativa fade-in com pequeno atraso
          } else {
            setError('');
          }
        } catch (error) {
          console.error('Erro na busca:', error);
        }
      };

      fetchMovies();
    }
  }, [query]);

  // Gerencia o fade-out e a remo√ß√£o do erro
  useEffect(() => {
    if (error) {
      const fadeTimer = setTimeout(() => setErrorIsVisible(false), 4000); // Inicia o fade-out ap√≥s 4s
      const removeTimer = setTimeout(() => setError(''), 5000); // Remove o erro ap√≥s 5s

      return () => {
        clearTimeout(fadeTimer);
        clearTimeout(removeTimer);
      };
    }
  }, [error]);

  return (
    <>
      <Head>
        <title>MiraFlix | Assista online</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon_popcorn.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link
          href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
          rel="stylesheet"
        ></link>
        <link href="https://fonts.googleapis.com/css2?family=Rubik+Gemstones&display=swap" rel="stylesheet"></link>
      </Head>

      <Header data={mockMovies} height="80vh" />
      <Container hasDegrade>
        <Box tag="div" styleSheet={{ display: 'flex', justifyContent: 'center' }}>
          <MovieCarousel items={results} />
        </Box>
        {error && (
          <Text
            tag="h4"
            styleSheet={{
              position: 'absolute',
              fontSize: theme.sizes.paragraph.mobileS,
              top: '55px',
              right: '14px',
              zIndex: '1',
              padding: '7px',
              margin: '0 12px',
              color: '#ffffffe4',
              background: theme.colors.background.error,
              borderRadius: '20px',
              opacity: errorIsVisible ? 1 : 0, // Define a visibilidade
              transition: 'opacity 0.5s ease', // Transi√ß√£o suave
            }}
          >
            {error}
          </Text>
        )}
        <MenuCategory title="Procurando uma categoria?" paddingTop="120px" />
      </Container>
      <Footer />
    </>
  );
}

export default withAuth(SearchResults);
